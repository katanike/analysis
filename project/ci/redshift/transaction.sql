DROP TABLE transaction if EXISTS;

CREATE TABLE transaction( 
    group_company_code  VARCHAR (10),
    wireless_sales_slip_no INTEGER,
    column_no        INTEGER,
    product_code     VARCHAR (30),
    full_tank_number VARCHAR (30),
    selling_price    INTEGER,
    meter_no         VARCHAR (30),
    hot_cold_classification  VARCHAR (30),
    last_visit_inventory VARCHAR (30),
    sales_quantity   INTEGER,
    sales_after_supply INTEGER,
    product_code_before_replacement VARCHAR (30),
    full_tank_quantity_before_product_replacement VARCHAR (30),
    number_of_products_introduced_before_product_replacement INTEGER,
    price_before_replacement  NUMERIC,
    meter_no_before_product_replacement  VARCHAR (30),
    hot_cold_classification_before_product_replacement VARCHAR (30),
    site_code        VARCHAR (30),
    department_code  VARCHAR (30),
    route_code       VARCHAR (30),
    customer_number  INTEGER,
    branch_number    INTEGER,
    equipment_code   VARCHAR (30),
    sales_date TIMESTAMP, 
    last_visit_date TIMESTAMP, 
    last_calibration_date TIMESTAMP, 
    number_of_sales_update_failure  INTEGER, 
    buying_place_code   VARCHAR (30),
    sales_system_representative_code  VARCHAR (30),
    sales_method_detail_code  VARCHAR (30),
    in_out_classification     VARCHAR (30),
    annual_contribution_sales_capacity_conversion NUMERIC, 
    open_closed_classificationVARCHAR (30),
    contents_manufacturer_codeVARCHAR (30),
    installation_date         VARCHAR (30),
    number_of_adjacent_vm_cc  NUMERIC, 
    number_of_adjacent_vm_k   NUMERIC, 
    number_of_adjacent_vm_a   NUMERIC, 
    number_of_adjacent_vm_dy  NUMERIC, 
    number_of_adjacent_vm_it  NUMERIC, 
    number_of_adjacent_vm_po  NUMERIC, 
    number_of_adjacent_vm_ot  NUMERIC, 
    number_of_adjacent_vm_sf  NUMERIC 
    );